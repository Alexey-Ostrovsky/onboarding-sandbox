#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/ton-order/utils.fc";
#include "imports/ton-order/fees.fc";
#include "imports/ton-order/opcodes.fc";
#include "imports/opcodes.fc";
#include "imports/order-asserts.fc";

(int, int, int, int, int, slice, slice, slice, cell, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(3), ;; status (0 - not inited, 1 - inited, 2 - filled, 3 - closed, 4 - expired)
        ds~load_uint(1), ;; side (0 - buy or 1 - sell)
        ds~load_uint(64), ;; quantity
        ds~load_uint(32), ;; price
        ds~load_uint(32), ;; order_id
        ds~load_msg_addr(), ;; deployer_address
        slice_bits(ds) > 64 ? ds~load_msg_addr() : "", ;; creator_address
        slice_bits(ds) > 64 ? ds~load_msg_addr() : "", ;; jetton_master_addres,
        ds~load_ref(), ;; order_code
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_uint(64) ;; expiration_time_t
    );
}

() save_data(int status, int side, int quantity, int price, int order_id, slice deployer_address, slice creator_address, slice jetton_master_addres, cell order_code, cell jetton_wallet_code, int expiration_time_t) impure {
    set_data(pack_ton_order_data(status, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_addres, order_code, jetton_wallet_code, expiration_time_t));
}

() send_tokens(int query_id, int amount, slice to_address, slice from_address, slice excesses_address, int msg_value, int fwd_fee) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(to_address)
        .store_slice(excesses_address)      ;; response_address for excesses
        .store_uint(0, 1)                   ;; empty custom payload
        .store_coins(fwd_fee)               ;; forward_ton_amount
        .store_uint(0, 8);                  ;; empty payload

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(from_address)          ;; who closes order jetton wallet address
        .store_coins(msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body.end_cell());

    send_raw_message(msg.end_cell(), 0);
}

() send_ton(int query_id, slice to_address, int ton_amount) impure inline {
    var mgs_body = begin_cell()
        .store_uint(0, 32)
        .store_uint(query_id, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)          ;; who closes order jetton wallet address
        .store_coins(ton_amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(mgs_body);

    send_raw_message(msg.end_cell(), 0);
}



() init_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    throw_unless(911, slice_bits(in_msg_body) == 64 + 1 + 64 + 32 + 267 + 267 + 64);
    var (status, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    throw_unless(912, status == status::NOT_INITIALIZED);
    throw_unless(913, equal_slices(deployer_address, sender_address));

    int query_id = in_msg_body~load_uint(64);
    side = in_msg_body~load_uint(1);
    quantity = in_msg_body~load_uint(64);
    price = in_msg_body~load_uint(32);
    jetton_master_address = in_msg_body~load_msg_addr();
    creator_address = in_msg_body~load_msg_addr();
    expiration_time_t = in_msg_body~load_uint(64);

    ;; if side is seller that means that order is still waiting for jetton to come in
    ;; is side is buyer that means that order is filled
    if (side == side::SELLER) {
        save_data(status::INITIALIZED, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t);
    } else {
        save_data(status::FILLED, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t);
    }
}

() close_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee, int my_ton_balance) impure inline {
    var (status, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();
    throw_if_jetton_wallet_fraud_detected(sender_address, jetton_master_address, jetton_wallet_code);

    throw_unless(937, side == side::BUYER);

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    throw_unless(928, jetton_amount == quantity);

    ;; reserve tons for storage and current computations
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = fee::tons_for_storage() - min(ton_balance_before_msg, fee::tons_for_storage());
    msg_value -= (storage_fee + fee::ton_order::close_consumption());

    throw_unless(948, msg_value > 4 * fwd_fee + 2 * (fee::jetton::consumption() +  fee::tons_for_storage()));

    cell jetton_wallet_state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
    slice order_jetton_wallet_address = calculate_jetton_wallet_address(jetton_wallet_state_init);

    int ton_amount = fwd_fee + quantity * price;

    send_ton(query_id, from_address, ton_amount);
    msg_value -= fwd_fee;

    send_tokens(query_id, quantity, creator_address, order_jetton_wallet_address, from_address, msg_value, fwd_fee + fee::jetton::consumption() + fee::tons_for_storage());

    save_data(status::CLOSED, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t);
}

() fill_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    var (status, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    throw_if_jetton_wallet_fraud_detected(sender_address, jetton_master_address, jetton_wallet_code);

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    throw_unless(927, equal_slices(deployer_address, from_address));
    throw_unless(928, jetton_amount == quantity);

    save_data(status::FILLED, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t);
}


() close_order_by_ton(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee, int my_ton_balance) impure inline {
    var (status, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    throw_unless(931, status == status::FILLED);
    throw_unless(932, side == side::SELLER);
    throw_unless(934, slice_bits(in_msg_body) == 64); ;; query_id

    int query_id = in_msg_body~load_uint(64);

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = fee::tons_for_storage() - min(ton_balance_before_msg, fee::tons_for_storage());
    msg_value -= (storage_fee + fee::ton_order::close_consumption());

    throw_unless(933, msg_value > quantity * price + 4 * fwd_fee + 2 * (fee::jetton::consumption() +  fee::tons_for_storage()));

    cell jetton_wallet_state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
    slice order_jetton_wallet_address = calculate_jetton_wallet_address(jetton_wallet_state_init);

    ;; reserve tons for storage and current computations

    int ton_amount = quantity * price + fwd_fee;
    send_ton(query_id, creator_address, msg_value);
    msg_value -= ton_amount;

    send_tokens(query_id, quantity, sender_address, order_jetton_wallet_address, sender_address, msg_value, fwd_fee + fee::jetton::consumption() +  2 * fee::tons_for_storage());

    save_data(status::CLOSED, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return (); ;; ignore bounced
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();                           ;; skip dst
    cs~load_coins();                              ;; skip value
    cs~skip_bits(1);                              ;; skip extracurrency collection
    cs~load_coins();                              ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);  ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == op::init_ton_order()) {
        init_order(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::close_ton_order()) {
        close_order_by_ton(in_msg_body, sender_address, msg_value, fwd_fee, my_balance);
        return ();
    }

    if (op == op::transfer_notification()) {
        slice ds = get_data().begin_parse();
        int status = ds~load_uint(3);

        if (status == status::INITIALIZED) {
            fill_order(in_msg_body, sender_address, msg_value, fwd_fee);
            return ();
        }

        if (status == status::FILLED) {
            close_order(in_msg_body, sender_address, msg_value, fwd_fee, my_balance);
            return ();
        }

        throw(917);
    }

    throw(0xffff);
}

;; handle timer notification from backend
() recv_external() impure {
    var (status, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();
    if ((status != status::FILLED) | (expiration_time_t == 0) | (expiration_time_t > now())) {
        return ();
    }

    accept_message();

    ;; TODO this

    save_data(status::EXPIRED, side, quantity, price, order_id, deployer_address, creator_address, jetton_master_address, order_code, jetton_wallet_code, expiration_time_t);
}

(int, int, int, int, int, slice, slice, slice, cell, cell, int) get_order_data() method_id {
    return load_data();
}
