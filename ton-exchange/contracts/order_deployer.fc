#include "imports/constants.fc";
#include "imports/stdlib.fc";
#include "imports/order-utils.fc";
#include "imports/ton-order/utils.fc";
#include "imports/order-asserts.fc";
#include "imports/opcodes.fc";
#include "imports/out-log.fc";
#include "imports/ton-order/opcodes.fc";
#include "imports/utils.fc";

(slice, int, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_uint(32), ;; current order_id
        ds~load_ref(), ;; order_code
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_ref()       ;; ton_order_code
    );
}

() save_data(slice admin_address, int order_id, cell order_code, cell jetton_wallet_code, cell ton_order_code) impure {
    set_data(begin_cell()
        .store_slice(admin_address)
        .store_uint(order_id, 32)
        .store_ref(order_code)
        .store_ref(jetton_wallet_code)
        .store_ref(ton_order_code)
        .end_cell()
    );
}

() create_ton_order_by_ton(int my_balance, slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    var (owner_address, order_id, order_code, jetton_wallet_code, ton_order_code) = load_data();

    ;; TODO: add validation
    int query_id = in_msg_body~load_uint(64);
    slice jetton_master_address = in_msg_body~load_msg_addr();
    int ton_amount = in_msg_body~load_coins();
    int price = in_msg_body~load_uint(32);
    int expiration_time_t = in_msg_body~load_uint(64);

    throw_unless(915, ton_amount ^% price == 0);

    int quantity = ton_amount / price;

    cell state_init = calculate_ton_order_state_init(my_address(), order_id, ton_order_code, jetton_wallet_code);
    slice new_order_address = calculate_order_address(state_init);

    ;; deploy and fill ton order
    var msg_body = begin_cell()
        .store_uint(op::init_ton_order(), 32)
        .store_uint(query_id, 64)
        .store_uint(side::BUYER, 1)
        .store_uint(quantity, 64)
        .store_uint(price, 32)
        .store_slice(jetton_master_address)
        .store_slice(sender_address)
        .store_uint(expiration_time_t, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(new_order_address)
        .store_coins(msg_value - 2 * fwd_fee) ;; TODO: improve
        .store_uint(0, 1 + 4 + 4 + 64 + 32)
        .store_uint(1, 1)
        .store_uint(1, 1)
        .store_ref(state_init)
        .store_uint(1, 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);

    save_data(owner_address, order_id + 1, order_code, jetton_wallet_code, ton_order_code);
}

() create_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee, int my_ton_balance) impure inline {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr(); ;; jetton's owner address - order creator

    slice either_forward_payload = in_msg_body;
    throw_if_fill_order_payload_invalid(714, either_forward_payload);

    var (owner_address, order_id, order_code, jetton_wallet_code, ton_order_code) = load_data();

    slice payload = either_forward_payload~load_ref().begin_parse(); ;; copy for extracting
    slice base_jetton_address = payload~load_msg_addr();
    slice quote_jetton_address = payload~load_msg_addr();
    int side = payload~load_uint(1);
    int price = payload~load_uint(32);

    ;; instead of order create jetton wallet address we use order deployer
    ;; jetton wallet address because it will be the same currency
    throw_if_jetton_wallet_fraud_detected(sender_address, side == side::SELLER ? base_jetton_address : quote_jetton_address, jetton_wallet_code);
    throw_unless(715, side == side::SELLER & (jetton_amount ^% price == 0));

    ;; reserve tons for storage and current computations
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = fee::tons_for_storage() - min(ton_balance_before_msg, fee::tons_for_storage());
    msg_value -= (storage_fee + fee::deployer::create_consumption());

    raw_reserve(fee::tons_for_storage(), 0);

    cell state_init = calculate_order_state_init(my_address(), order_id, order_code, jetton_wallet_code);
    slice new_order_address = calculate_order_address(state_init);

    ;; deploy + forward_fee + (transfer + internal_transfer + notification)
    int coins_for_deploy = fwd_fee + fee::order::create_consumption() + fee::tons_for_storage();
    int forward_ton_amount = fwd_fee + fee::order::fill_consumption();
    throw_unless(900, msg_value > coins_for_deploy + forward_ton_amount + 3 * fwd_fee + 2 * (fee::jetton::consumption() + fee::tons_for_storage()));

    ;; reserve tons for deploy
    msg_value -= coins_for_deploy;

    ;; notify about new order
    builder log = begin_cell()
        .store_uint(order_id, 32)
        .store_slice(new_order_address)
        .store_slice(from_address);
    send_log(log);

    ;; deploy new order contract
    var msg_body = begin_cell()
        .store_uint(op::init_order(), 32)
        .store_uint(query_id, 64)
        .store_slice(from_address)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(new_order_address)
        .store_coins(coins_for_deploy)
        .store_uint(0, 1 + 4 + 4 + 64 + 32)
        .store_uint(1, 1)
        .store_uint(1, 1)
        .store_ref(state_init)
        .store_uint(1, 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 0);

    ;; send jetton to orders wallet
    var order_wallet_msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(new_order_address)
        .store_slice(from_address)     ;; response_address for excesses
        .store_uint(0, 1)              ;; empty custom payload (either dict)
        .store_coins(forward_ton_amount)
        .store_slice(either_forward_payload);

    var order_wallet_msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address) ;; deployer's jetton wallet address
        .store_coins(msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(order_wallet_msg_body.end_cell());
    send_raw_message(order_wallet_msg.end_cell(), 0);

    save_data(owner_address, order_id + 1, order_code, jetton_wallet_code, ton_order_code);
}

() create_ton_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee, int my_ton_balance) impure inline {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr(); ;; jetton's owner address - order creator

    var (owner_address, order_id, order_code, jetton_wallet_code, ton_order_code) = load_data();

    slice payload = in_msg_body~load_ref().begin_parse();
    slice jetton_master_address = payload~load_msg_addr();
    int price = payload~load_uint(32);
    int expiration_time_t = payload~load_uint(64);

    throw_if_jetton_wallet_fraud_detected(sender_address, jetton_master_address, jetton_wallet_code);

    int quantity = jetton_amount;
    cell state_init = calculate_ton_order_state_init(my_address(), order_id, ton_order_code, jetton_wallet_code);
    slice new_order_address = calculate_order_address(state_init);

    ;; deploy
    var msg_body = begin_cell()
        .store_uint(op::init_ton_order(), 32)
        .store_uint(query_id, 64)
        .store_uint(side::SELLER, 1)
        .store_uint(quantity, 64)
        .store_uint(price, 32)
        .store_slice(jetton_master_address)
        .store_slice(from_address)
        .store_uint(expiration_time_t, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(new_order_address)
        .store_coins(msg_value / 3)
        .store_uint(0, 1 + 4 + 4 + 64 + 32)
        .store_uint(1, 1)
        .store_uint(1, 1)
        .store_ref(state_init)
        .store_uint(1, 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);

    ;; fill
    var order_wallet_msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(new_order_address)
        .store_slice(from_address)     ;; response_address for excesses
        .store_uint(0, 1)              ;; empty custom payload (either dict)
        .store_coins(msg_value / 4)
        .store_uint(0, 1); ;; no either_fwd_payload

    var order_wallet_msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address) ;; deployer's jetton wallet address
        .store_coins(msg_value / 3)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(order_wallet_msg_body.end_cell());

    send_raw_message(order_wallet_msg.end_cell(), 1);

    ;; notify about new order
    builder log = begin_cell()
        .store_uint(order_id, 32)
        .store_slice(new_order_address)
        .store_slice(from_address);
    send_log(log);

    save_data(owner_address, order_id + 1, order_code, jetton_wallet_code, ton_order_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();                           ;; skip dst
    cs~load_coins();                              ;; skip value
    cs~skip_bits(1);                              ;; skip extracurrency collection
    cs~load_coins();                              ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);  ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer_notification()) {
        var (slice_left, bits) = in_msg_body.skip_bits(64).load_uint(4);
        slice_left~skip_bits(bits * 8 + 267);
        int inner_op = slice_left~load_uint(32);

        if (inner_op == op::notification::create_order()) {
            create_order(in_msg_body, sender_address, msg_value, fwd_fee, my_balance);
            return ();
        }

        if (inner_op == op::notification::create_ton_order()) {
            create_ton_order(in_msg_body, sender_address, msg_value, fwd_fee);
            return ();
        }

        throw(0xffff);
    }

    if (op == op::create_ton_order()) {
        create_ton_order_by_ton(my_balance, in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(0xffff);
}

(slice, int, cell, cell, cell) get_order_deployer_data() method_id {
    return load_data();
}

slice get_order_address(int order_id, int orderType) method_id {
    var (_, _, order_code, jetton_wallet_code, ton_order_code) = load_data();

    if (orderType == 0) {
        cell state_init = calculate_order_state_init(my_address(), order_id, order_code, jetton_wallet_code);
        return calculate_order_address(state_init);
    }

    cell state_init = calculate_ton_order_state_init(my_address(), order_id, ton_order_code, jetton_wallet_code);
    return calculate_order_address(state_init);
}
