#include "imports/constants.fc";
#include "imports/stdlib.fc";
#include "imports/order-utils.fc";
#include "imports/opcodes.fc";
#include "imports/jetton-utils.fc";
#include "imports/order-asserts.fc";
#include "imports/utils.fc";

(int, slice, slice, int, int, int, int, slice, slice, slice, cell, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    int status = ds~load_uint(3);
    slice total_base_quote_cell = ds~load_ref().begin_parse();
    int total_amount = total_base_quote_cell~load_coins();
    slice base_wallet_address = slice_bits(total_base_quote_cell) > 0 ? total_base_quote_cell~load_msg_addr() : ""; ;; base_jetton_address
    slice quote_wallet_address = slice_bits(total_base_quote_cell) > 0 ? total_base_quote_cell~load_msg_addr() : ""; ;; quote_jetton_address
    return (
        status, ;; status (0 - not inited, 1 - inited, 2 - filled, 3 - closed, 4 - expired)
        base_wallet_address,
        quote_wallet_address,
        ds~load_uint(1), ;; side (0 - buy or 1 - sell)
        total_amount, ;; total_amount
        ds~load_uint(64), ;; price
        ds~load_uint(32), ;; order_id
        ds~load_msg_addr(), ;; deployer_address
        slice_bits(ds) > 64 ? ds~load_msg_addr() : "", ;; creator_address
        slice_bits(ds) > 64 ? ds~load_msg_addr() : "", ;; wallet_address
        ds~load_ref(), ;; order_code
        ds~load_ref(),       ;; jetton_wallet_code
        ds~load_uint(64) ;; expiration_time_t
    );
}

() save_data(int status, slice base_jetton_address, slice quote_jetton_address, int side, int total_amount, int price, int order_id, slice deployer_address, slice creator_address, slice wallet_address, cell order_code, cell jetton_wallet_code, int expiration_time_t) impure {
    set_data(pack_order_data(status, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t));
}

() init_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    throw_unless(814, slice_bits(in_msg_body) > 0);

    int query_id = in_msg_body~load_uint(64);
    slice creator = in_msg_body~load_msg_addr();

    var (status, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    throw_unless(815, equal_slices(deployer_address, sender_address));
    throw_unless(816, status == status::NOT_INITIALIZED);

    save_data(status::INITIALIZED, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator, wallet_address, order_code, jetton_wallet_code, expiration_time_t);
}

() recall_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    throw_unless(1114, slice_bits(in_msg_body) == 64);
    int query_id = in_msg_body~load_uint(64);

    var (status, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    throw_unless(1115, equal_slices(creator_address, sender_address));
    throw_unless(1116, status == status::FILLED);

    var jetton_wallet_addres = calculate_user_jetton_wallet_address(my_address(), side == side::SELLER ? base_jetton_address : quote_jetton_address, jetton_wallet_code);

    send_jettons_with_mode(query_id, total_amount, creator_address, jetton_wallet_addres, creator_address, 0, 10000000, 128);

    save_data(status::RECALLED, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t);
}

() fill_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    var (status, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    int forward_payload_value = fwd_fee + fee::jetton::consumption();
    int transfer_fee = 3 * fwd_fee + 2 * (fee::jetton::consumption() + fee::tons_for_storage()) + forward_payload_value;
    throw_unless_excesses(827, equal_slices(deployer_address, from_address), query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);

    slice payload = in_msg_body~load_ref().begin_parse();
    base_jetton_address = payload~load_msg_addr();
    quote_jetton_address = payload~load_msg_addr();
    side = payload~load_uint(1);
    price = payload~load_uint(64);
    expiration_time_t = payload~load_uint(64);

    int is_correct_side = (side == side::SELLER) | (side == side::BUYER);
    throw_unless_excesses(819, is_correct_side, query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);

    wallet_address = sender_address;
    total_amount = jetton_amount;
    save_data(status::FILLED, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t);
}

() close_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    var (status, base_wallet_address, quote_wallet_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    int forward_payload_value = fwd_fee + fee::jetton::consumption();
    ;; transfer + internal_transfer + notification
    int transfer_fee = 3 * fwd_fee + 2 * (fee::jetton::consumption() + fee::tons_for_storage()) + forward_payload_value;

    slice either_forward_payload = in_msg_body~unpack_forward_payload();

    throw_unless_excesses(822, slice_bits(either_forward_payload) == 1 + 64, query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value); ;; side, price

    int user_side = either_forward_payload~load_uint(1);
    int user_price = either_forward_payload~load_uint(64);

    int fraud = check_if_jetton_wallet_fraud_detected(sender_address, side == side::SELLER ? quote_wallet_address : base_wallet_address, jetton_wallet_code);
    throw_unless_excesses(899, fraud == 0, query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);

    int is_correct_side = (side == side::SELLER ? user_side == side::BUYER : user_side == side::SELLER);
    throw_unless_excesses(824, is_correct_side , query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);
    throw_unless_excesses(825, price == user_price, query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);

    int user_quantity = calculate_quantity(user_side, jetton_amount, user_price);
    int quantity = calculate_quantity(side, total_amount, user_price);

    int total_quantity = min(user_quantity, quantity);

    ;; remainder
    int remainder = 0;
    if (side == side::SELLER) {
        remainder = jetton_amount - total_quantity * user_price / NORM_FACTOR;
    } else {
        remainder = jetton_amount - total_quantity;
    }

    ;; exchange + current consumption
    int total_consumption = (remainder > 0) ? 3 : 2 * (transfer_fee) + fee::order::close_consumption();
    throw_unless_excesses(950, msg_value > total_consumption, query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);

    if (side == side::SELLER) {
        ;; buy order
        send_jettons(query_id, total_quantity * user_price / NORM_FACTOR, creator_address, sender_address, from_address, transfer_fee, forward_payload_value);
        send_jettons(query_id, total_quantity, from_address, wallet_address, from_address, transfer_fee, forward_payload_value);
    } else {
        ;; sell order
        send_jettons(query_id, total_quantity, creator_address, sender_address, from_address, transfer_fee, forward_payload_value);
        send_jettons(query_id, total_quantity * price / NORM_FACTOR, from_address, wallet_address, from_address, transfer_fee, forward_payload_value);
    }

    if (remainder > 0) {
        ;; return jetton excess
        send_jettons(query_id, remainder, from_address, sender_address, from_address, transfer_fee, forward_payload_value);
    }

    ;; current user toncoin excesses
    msg_value -= total_consumption;
    if (msg_value > 0) {
        var msg_excesses = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(from_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_int(0, 8); ;; simple transfer to wallet
        send_raw_message(msg_excesses.end_cell(), 2);
    }

    if (side == side::SELLER) {
        total_amount -= total_quantity;
    } else {
        total_amount -= total_quantity * price / NORM_FACTOR;
    }

    if (total_amount < 0) {
        ;; smth goes wrong
        throw_unless_excesses(1000, 0, query_id, jetton_amount, from_address, sender_address,
                                from_address, transfer_fee, forward_payload_value);
    }

    if (total_amount != 0) {
        save_data(status, base_wallet_address, quote_wallet_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t);
        return ();
    }

    ;; self destruct, total_amount == 0
    var msg_destruct = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(creator_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_int(0, 8); ;; simple transfer to wallet
    send_raw_message(msg_destruct.end_cell(), 128);

    save_data(status::CLOSED, base_wallet_address, quote_wallet_address, side, 0, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return (); ;; ignore bounced
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();                           ;; skip dst
    cs~load_coins();                              ;; skip value
    cs~skip_bits(1);                              ;; skip extracurrency collection
    cs~load_coins();                              ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);  ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == op::init_order()) {
        init_order(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::recall_order()) {
        recall_order(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::transfer_notification()) {
        slice ds = get_data().begin_parse();
        int status = ds~load_uint(3);

        if (status == status::INITIALIZED) {
            fill_order(in_msg_body, sender_address, msg_value, fwd_fee);
            return ();
        }

        if (status == status::FILLED) {
            close_order(in_msg_body, sender_address, msg_value, fwd_fee);
            return ();
        }

        throw(817);
    }

    throw(0xffff);
}

;; handle timer notification from backend
() recv_external() impure {
    var (status, base_jetton_address, quote_jetton_address, side, total_amount, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t) = load_data();
    if ((status != status::FILLED) | (expiration_time_t == 0) | ((expiration_time_t / 1000) > now())) {
        return ();
    }

    accept_message();

    var jetton_wallet_addres = calculate_user_jetton_wallet_address(my_address(), side == side::SELLER ? base_jetton_address : quote_jetton_address, jetton_wallet_code);

    send_jettons(0, total_amount, creator_address, jetton_wallet_addres, creator_address, 0, 10000000);

    save_data(status::EXPIRED, base_jetton_address, quote_jetton_address, side, 0, price, order_id, deployer_address, creator_address, wallet_address, order_code, jetton_wallet_code, expiration_time_t);
}

(int, slice, slice, int, int, int, int, slice, slice, slice, cell, cell, int) get_order_data() method_id {
    return load_data();
}
