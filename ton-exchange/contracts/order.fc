#include "imports/constants.fc";
#include "imports/stdlib.fc";
#include "imports/order-utils.fc";
#include "imports/opcodes.fc";

(int, int, int, int, int, int, int, slice, slice, slice, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
        ds~load_uint(2),    ;; status (0 - not inited, 1 - inited, 2 - filled, 3 - closed)
        ds~load_uint(32),   ;; base
        ds~load_uint(32),   ;; quote
        ds~load_uint(1),    ;; side (0 - buy or 1 - sell)
        ds~load_uint(64),   ;; quantity
        ds~load_uint(32),   ;; price
        ds~load_uint(32),   ;; order_id
        ds~load_msg_addr(),  ;; deployer_address
        slice_bits(ds) > 0 ? ds~load_msg_addr() : "", ;; creator_address
        slice_bits(ds) > 0 ? ds~load_msg_addr() : "", ;; wallet_address
        ds~load_ref()       ;; order_code
  );
}

() save_data(   int status, int base, int quote, int side,
                int quantity, int price, int order_id,
                slice deployer_address,
                slice creator_address,
                slice wallet_address, cell order_code) impure {
    set_data(pack_order_data(status, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code));
}

() init_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    throw_unless(814, slice_bits(in_msg_body) > 0);

    slice creator = in_msg_body~load_msg_addr();

    var (status, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code) = load_data();

    throw_unless(815, equal_slices(deployer_address, sender_address));
    throw_unless(816, status == status::NOT_INITIALIZED);

    save_data(status::INITIALIZED, base, quote, side, quantity, price, order_id, deployer_address, creator, wallet_address, order_code);
}


() fill_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    var (status, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code) = load_data();

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    slice either_forward_payload = in_msg_body;

    throw_unless(827, equal_slices(deployer_address, from_address));
    throw_unless(818, slice_bits(either_forward_payload) == 32 + 32 + 1 + 32);
    base = either_forward_payload~load_uint(32);
    quote = either_forward_payload~load_uint(32);
    side = either_forward_payload~load_uint(1);
    price = either_forward_payload~load_uint(32);

    throw_unless(819, (side == side::SELLER) | (side == side::BUYER));

    wallet_address = sender_address;
    quantity = calculate_quantity(side, jetton_amount, price);
    save_data(status::FILLED, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code);
}

() send_tokens(int query_id, int amount, slice to_address, slice from_address, slice excesses_address, int msg_value, int fwd_fee) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(to_address)
        .store_slice(excesses_address)      ;; response_address for excesses
        .store_uint(0, 1)                   ;; empty custom payload
        .store_coins(fwd_fee)               ;; forward_ton_amount TODO: need to calculate how many coins are neede to forwarded
        .store_uint(0, 8);                  ;; empty payload

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(from_address)          ;; who closes order jetton wallet address
        .store_coins(msg_value - 2 * fwd_fee)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body.end_cell());

    send_raw_message(msg.end_cell(), 2);
}

() close_order(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline {
    var (status, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code) = load_data();

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    slice either_forward_payload = in_msg_body;
    throw_unless(821, slice_bits(either_forward_payload) == 32 + 32 + 1 + 32);

    int user_base = either_forward_payload~load_uint(32);
    int user_quote = either_forward_payload~load_uint(32);
    int user_side = either_forward_payload~load_uint(1);
    int user_price = either_forward_payload~load_uint(32);

    throw_unless(822, base == user_base);
    throw_unless(823, quote == user_quote);
    throw_unless(824, side == side::SELLER ? user_side == side::BUYER : user_side == side::SELLER);
    throw_unless(825, price == user_price);

    int user_quantity = calculate_quantity(user_side, jetton_amount, user_price);
    throw_unless(826, quantity == user_quantity);


    if (side == side::SELLER) ;; buy order
    {
        send_tokens(query_id, user_quantity, creator_address, sender_address, from_address, msg_value, fwd_fee);
        send_tokens(query_id, quantity * price, from_address, wallet_address, from_address, msg_value, fwd_fee);
        return();
    }

    ;; sell order
    int value = msg_value / 2;
    send_tokens(query_id, user_quantity * user_price, creator_address, sender_address, from_address, value, fwd_fee);
    send_tokens(query_id, quantity, from_address, wallet_address, from_address, msg_value - value, fwd_fee);

    ;; current excesses
    var msg = begin_cell()
        .store_uint(0x10, 6) ;;
        .store_slice(from_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_int(0, 8); ;; simple transfer to wallet
    send_raw_message(msg.end_cell(), 64);

    ;; self destruct
    var msg = begin_cell()
        .store_uint(0x10, 6) ;;
        .store_slice(creator_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_int(0, 8); ;; simple transfer to wallet
    send_raw_message(msg.end_cell(), 128);

    save_data(status::CLOSED, base, quote, side, 0, price, order_id, deployer_address, creator_address, wallet_address, order_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return (); ;; ignore bounced
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();                           ;; skip dst
    cs~load_coins();                              ;; skip value
    cs~skip_bits(1);                              ;; skip extracurrency collection
    cs~load_coins();                              ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);  ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == op::init_order()) {
        init_order(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::transfer_notification()) {

        slice ds = get_data().begin_parse();
        int status = ds~load_uint(2);

        if (status == status::INITIALIZED) {
            fill_order(in_msg_body, sender_address, msg_value, fwd_fee);
            return ();
        }

        if (status == status::FILLED) {
            close_order(in_msg_body, sender_address, msg_value, fwd_fee);
            return ();
        }

        throw(817);
    }

    throw(0xffff);
}

(int, int, int, int, int, int, int, slice, slice, slice, cell) get_order_data() method_id {
    var (status, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code) = load_data();
    return (status, base, quote, side, quantity, price, order_id, deployer_address, creator_address, wallet_address, order_code);
}

